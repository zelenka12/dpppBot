import logging
from config import *
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import psycopg2
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from kvest import kvest

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)  # add bot token
dp = Dispatcher(bot, storage=MemoryStorage())
connection = psycopg2.connect(database="de5kuesnfcrulq",
                              user="dlfclsnqthaqfw",
                              password="3fd5cb1203005f2937891cec7089c8801b9e6340609eb877adc5130f9eecf4da",
                              host="ec2-34-254-69-72.eu-west-1.compute.amazonaws.com",
                              port="5432")

cursor = connection.cursor()
choses_of_actions = ['–†–æ–∑—Å–∏–ª–∫–∞', '–Ü–Ω–æ—Ñ—Ä–º–∞—Ü—ñ—è']
choses_of_stanucya = {'–ª—å–≤—ñ–≤': -568935684,
                      '–∫–∏—ó–≤': -351147226,
                      '—Ö–∞—Ä–∫—ñ–≤': -591789915,
                      'all': -544848505}

list_stanuc = ['–ª—å–≤—ñ–≤','–∫–∏—ó–≤','—Ö–∞—Ä–∫—ñ–≤']
class Register_state(StatesGroup):
    f_name = State()
    old = State()
    stanucya = State()
    poshta = State()


class Admin_state(StatesGroup):
    chose_of_action = State()
    chose_of_stanucya = State()
    message_to_send = State()


class Kvest_state(StatesGroup):
    start_of_quest = State()
    action_of_quest = State()
    solve_of_quest = State()
    finish_of_quest = State()

@dp.message_handler(commands=['start', 'menu'])  # cmd_start
async def start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'))
    kb.add(types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'))
    kb.add(types.KeyboardButton('–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é'))
    await message.answer('''–°–ö–û–ë! –î—Ä—É–∂–µ\–ü–æ–¥—Ä—É–≥–æ!''', reply_markup=kb)

@dp.message_handler(lambda message: message.text == '–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é')
async def gel_reg(message: types.Message):
    try:
        user_id = message.from_user.id
        cursor.execute('SELECT user_id FROM subs')
        data = cursor.fetchall()
        subs_ids = []
        for id in data:
            subs_ids.append(id[0])
        if user_id in subs_ids:
            cursor.execute(f"""DELETE FROM subs WHERE user_id='{user_id}'""")
            await message.answer('–í–∏–¥–∞–ª–µ–Ω–æ')
        else:
            await message.answer('–¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!')
        connection.commit()
    except psycopg2.errors.InFailedSqlTransaction:
      connection.commit()
      del_reg(message)

@dp.message_handler(lambda message: message.text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", state=None)
async def register(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT user_id FROM subs')
    data = cursor.fetchall()
    subs_ids = []
    for id in data:
        subs_ids.append(id[0])
    connection.commit()
    if user_id in subs_ids:
        await message.answer('–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!')
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ")
        await Register_state.f_name.set()

@dp.message_handler(state=Register_state.f_name)
async def f_name(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(f_name=answer)
    await Register_state.next()
    await message.answer('–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?')

@dp.message_handler(state=Register_state.old)
async def old(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(old=answer)
    await Register_state.next()
    await message.answer('–ó —è–∫–æ—ó –°—Ç–∞–Ω–∏—Ü—ñ?')

@dp.message_handler(state=Register_state.stanucya)
async def stanucya(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(stanucya=answer)
    await Register_state.next()
    await message.answer('–í–∫–∞–∂–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–π–±–ª–∏–∂—á–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏')

@dp.message_handler(state=Register_state.poshta)
async def poshta(message: types.Message, state: FSMContext):
    try:
        answer = message.text
        await state.update_data(poshta=answer)
        username = message.from_user.username
        user_id = message.from_user.id
        user_data = await state.get_data()
        f_name = user_data.get('f_name')
        old = user_data.get('old')
        stanucya = user_data.get('stanucya')
        poshta = user_data.get('poshta')
        data = cursor.fetchall()
        subs_ids = []
        for id in data:
            subs_ids.append(id[0])
        if "'" in f_name:
            f_name = f_name.replace("'", '')
        if user_id not in subs_ids:
            cursor.execute(f"INSERT INTO subs (username,f_name,old,user_id,stanucya,poshta,score,progress) "
                f"VALUES ('{username}', '{f_name}', '{old}', '{user_id}', '{stanucya}', '{poshta},0,0')")
            connection.commit()
        else:
            cursor.execute(f"UPDATE subs SET username='{username}',f_name='{f_name}', "
                         f"old='{old}',user_id='{user_id}',stanucya='{stanucya}', poshta='{poshta}' "
                         f"WHERE user_id={user_id}")
            connection.commit()
        await message.answer('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –£—Å–ø—ñ—à–Ω–∞')
        await state.finish()
    except psycopg2.ProgrammingError:
        connection.commit()


@dp.message_handler(lambda message: message.text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
async def info(message: types.Message):
    await message.answer('''–Ø —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç-–±–æ—Ç, —â–æ —Å—Ç–∞–Ω–µ —Ç–≤–æ—ó–º 
    —î–¥–∏–Ω–∏–º —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —É –∫–≤–µ—Å—Ç—ñ –¥–æ –î–Ω—è –ø–µ—Ä—à–æ—ó –ø–ª–∞—Å—Ç–æ–≤–æ—ó –ø—Ä–∏—Å—è–≥–∏. 
    –ó–∞—Ö—ñ–¥ –±—É–¥–µ —Ç—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏—Å—è –æ–Ω–ª–∞–π–Ω 11 –∫–≤—ñ—Ç–Ω—è. –ü–æ—á–∞—Ç–æ–∫ –∫–≤–µ—Å—Ç—É: 10:00. 
    –£—Å—é –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª—é —Ç–æ–±—ñ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ - —Å–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏.

–í—Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º —ñ–∑ –±–æ—Ç–æ–º –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥—ñ–π:
1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞(–≤–≤–µ–¥—ñ—Ç—å –≤ —á–∞—Ç—ñ –∫–æ–º–∞–Ω–¥—É /start)
2. –ù–µ –ø–æ–º–æ–≥–ª–æ? –¢–æ–¥—ñ –ø–∏—à—ñ—Ç—å —Å—é–¥–∏: @zelenkkkaaaaa''')


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message, state: FSMContext):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in choses_of_actions:
        kb.add(i)
    await message.answer('–ü—Ä–∏–≤—ñ—Ç –ê–¥–º—ñ–Ω –±–æ—Ç–∞, –æ–±–µ—Ä–∏ –¥—ñ—é:', reply_markup=kb)
    await Admin_state.chose_of_action.set()


@dp.message_handler(state=Admin_state.chose_of_action)
async def action(message: types.Message, state: FSMContext):
    if message.text == '–†–æ–∑—Å–∏–ª–∫–∞':
        kb = types.ReplyKeyboardRemove()
        await message.answer('üñê', reply_markup=kb)
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in choses_of_stanucya.keys():
            kb.add(i)
        await message.answer('–Ø–∫–∏–π —á–∞—Ç –Ω–∞–¥—Å–∏–ª–∞—î–º–æ?', reply_markup=kb)
        await Admin_state.next()
    else:
        pass


@dp.message_handler(state=Admin_state.chose_of_stanucya)
async def choses_of_stanucya_to_send(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(chose_of_stanucya=answer)
    kb = types.ReplyKeyboardRemove()
    await message.answer('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?', reply_markup=kb)
    await Admin_state.next()


@dp.message_handler(state=Admin_state.message_to_send)
async def message_send_to_user(message: types.Message, state: FSMContext):
    text = message.text
    await state.update_data(message_to_send=text)
    cursor.execute('SELECT user_id FROM subs')
    data = cursor.fetchall()
    subs_info = []
    for id in data:
        subs_info.append(id[0])
    for i in subs_info:
        await bot.send_message(i, text)
    connection.commit()
    await state.finish()


@dp.message_handler(lambda message: message.text == "–†–æ–∑–ø–æ—á–∞—Ç–∏ –∫–≤–µ—Å—Ç")
async def solve(message: types.Message, state: FSMContext):
    await Kvest_state.start_of_quest.set()
    cursor.execute('SELECT user_id, progress FROM subs')
    data = cursor.fetchall()
    subs_info = {}
    for id, progress in data:
        subs_info[id] = progress
    user_id = message.from_user.id
    await state.update_data(action_of_quest=user_id)
    list_kb = ['–¢–∞–∫!']
    kb = types.ReplyKeyboardMarkup()
    for i in list_kb:
        kb.add(i)
    await message.answer('–ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∫–≤–µ—Å—Ç?', reply_markup=kb)
    cursor.execute(f"UPDATE subs SET progress=1 WHERE user_id='{user_id}'")
    await Kvest_state.next()
    connection.commit()

@dp.message_handler(state=Kvest_state.action_of_quest)
async def action_of_quest(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get('action_of_quest')
    cursor.execute(f'SELECT progress FROM subs WHERE user_id={user_id}')
    data = cursor.fetchall()
    progress = data[0][0]
    for number, task in kvest.items():
        if progress == 12:
            if number == progress:
                await bot.send_photo(message.chat.id, photo=open(f'dpppBot/photos/{task[0]}', 'rb'))
                await message.answer('–ù–∞–ø–∏—à–∏ –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –≤—ñ–¥–≥–∫—É –±—É–¥—å-–ª–∞—Å–∫–∞, –Ø–∫ —Ç–æ–±—ñ –∫–≤–µ—Å—Ç?')
                await Kvest_state.finish_of_quest.set()
                break
        if number == progress:
            if task[1] != 0:
                kb = types.InlineKeyboardMarkup(resize_keyboard=True)
                kb.add(types.InlineKeyboardButton(text='–¢–∏—Ü—å', url=f'{task[1]}'))
                await bot.send_photo(message.chat.id, photo=open(f'dpppBot/photos/{task[0]}', 'rb'), reply_markup=kb)
                await Kvest_state.next()
                break
            else:
                await bot.send_photo(message.chat.id, photo=open(f'dpppBot/photos/{task[0]}', 'rb'))
                await Kvest_state.next()
                break
        else:
            pass
    connection.commit()


@dp.message_handler(content_types=['photo', 'text'], state=Kvest_state.solve_of_quest)
async def solve_of_kvest(message: types.Message, state: FSMContext):
    id = message.message_id
    user_data = await state.get_data()
    user_id = user_data['action_of_quest']
    cursor.execute(f'SELECT stanucya FROM subs WHERE user_id={user_id}')
    data = cursor.fetchall()
    stanucya = data[0][0].replace(' ', '')
    if stanucya.lower() not in list_stanuc:
        stanucya = 'all'
    else:
        pass
    await bot.forward_message(choses_of_stanucya[f'{stanucya.lower()}'], message.chat.id, message_id=id)
    await Kvest_state.action_of_quest.set()
    cursor.execute(f'SELECT progress FROM subs WHERE user_id={user_id}')
    data = cursor.fetchall()
    current_progress = data[0][0]
    if current_progress < 12:
        cursor.execute(f'UPDATE subs SET progress={current_progress+1} WHERE user_id={user_id}')
        await message.answer('–ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è?')
    else:
        await message.answer('–í—ñ—Ç–∞—é!')
    connection.commit()

@dp.message_handler(state=Kvest_state.finish_of_quest)
async def finish(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.forward_message(-490991329, message.chat.id, message.message_id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add('/start')
    await message.answer('–ù–∞—Ç–∏—Å–Ω–∏ —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é', reply_markup=kb)

@dp.message_handler(lambda message: 'approve' in message.text)
async def approve(message: types.Message, state: FSMContext):
    score = message.text.split(' ')[1]
    user_id = message.from_user.id
    cursor.execute(f"SELECT score FROM subs WHERE user_id = '{user_id}' ")
    data = cursor.fetchall()
    current_score = int(data[0][0])
    cursor.execute(f"UPDATE subs SET score = '{int(score) + int(current_score)}' WHERE user_id='{user_id}' ")
    await message.answer(f'–û—á–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ')
    connection.commit()


if __name__ == "__main__":  # start polling
    executor.start_polling(dp, skip_updates=True)
